{"version":3,"sources":["components/navbar/navbar.jsx","components/someapp/someapp.jsx","components/tableapp/tableapp.jsx","components/todoapp/todoapp.jsx","App.js","serviceWorker.js","Redux/Reducers/todoReducer.js","Redux/Reducers/rootReducer.js","Redux/store.js","index.js"],"names":["Navbar","state","react_default","a","createElement","className","react_router_dom","to","Component","Someapp","Tableapp","Todoapp","App","_ref","location","Fragment","navbar_navbar","react_transition_group","key","timeout","classNames","react_router","Object","objectSpread","strict","path","exact","component","Boolean","window","hostname","match","initialState","todoReducer","arguments","length","undefined","type","rootReducer","combineReducers","todoState","middleware","thunk","store","createStore","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAyBeA,oNArBXC,MAAQ,2EAIJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,YAEJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,SAAZ,QACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,SAAZ,QACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,UAAZ,mBAdHC,cCONC,EARC,WACZ,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,wBCIGM,EARE,WACb,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yBCMGO,EARC,WACZ,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,8BCiCGQ,MA5Bf,SAAAC,GAA2B,IAAZC,EAAYD,EAAZC,SACb,OACEZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,KAEEb,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACY,EAAD,OAGFd,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACa,EAAA,gBAAD,KACEf,EAAAC,EAAAC,cAACa,EAAA,cAAD,CACEC,IAAKJ,EAASI,IACdC,QAAS,IACTC,WAAW,QAEXlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQP,SAAQQ,OAAAC,EAAA,EAAAD,CAAA,GAAOR,IACrBZ,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOG,QAAM,EAACC,KAAM,CAAC,QAAS,KAAMC,OAAK,EAACC,UAAWhB,IACrDT,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOI,KAAK,QAAQE,UAAWlB,IAC/BP,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOI,KAAK,SAASE,UAAWjB,UChB1BkB,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,8EChBAC,EAAe,GASNC,MAPf,WAAmD,IAA9BhC,EAA8BiC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,EAGjB,OAHuCE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAChCC,KAEApC,GCAJqC,EAJKC,YAAgB,CAChCC,UAAWP,ICETQ,EAAa,CACfC,KAQWC,EALDC,YAAYN,EANL,GAMgCO,YACjDC,IAAeC,WAAf,EAAmBN,GACnBZ,OAAOmB,8BAAgCnB,OAAOmB,iCCFlDC,IAASC,OACLhD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUR,MAAOA,GACbzC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOI,KAAK,IAAIE,UAAWf,MAGnCwC,SAASC,eAAe,SJiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.615200aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport './navbar.css';\r\nclass Navbar extends Component {\r\n    state = {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <nav className='nav'>\r\n                <div className=\"nav__logo\">\r\n                    <Link to='/todo'>Progect</Link>\r\n                </div>\r\n                <div className='nav__menu'>\r\n                    <ul>\r\n                        <NavLink to='/todo' >Todo</NavLink>\r\n                        <NavLink to='/some' >Some</NavLink>\r\n                        <NavLink to='/table' >Table</NavLink>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Someapp = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <h1>Some App</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Someapp;","import React from 'react';\r\nconst Tableapp = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <h1>Table App</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tableapp;","import React from 'react';\r\n\r\nconst Todoapp = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <h1>Todo App</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todoapp;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport Navbar from './components/navbar/navbar';\nimport Someapp from './components/someapp/someapp';\nimport Tableapp from './components/tableapp/tableapp';\nimport Todoapp from './components/todoapp/todoapp';\nimport './App.css';\n\nfunction App({ location }) {\n  return (\n    <React.Fragment>\n\n      <header>\n        <Navbar />\n      </header>\n\n      <section>\n        <TransitionGroup>\n          <CSSTransition\n            key={location.key}\n            timeout={1000}\n            classNames='fade'\n          >\n            <Switch location={{ ...location }}>\n              <Route strict path={['/todo', '/']} exact component={Todoapp} />\n              <Route path='/some' component={Someapp} />\n              <Route path='/table' component={Tableapp} />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      </section>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { } from '../types';\r\n\r\nconst initialState = {};\r\n\r\nfunction todoReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import { combineReducers } from 'redux';\r\nimport todoReducer from './todoReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoState: todoReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './Reducers/rootReducer';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [\r\n    thunk\r\n];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './Redux/store';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <Route path='/' component={App} />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}